AWSTemplateFormatVersion: 2010-09-09
Description: |
  This CloudFormation script provisions a EC2 Instance launch with Tomcat .
  This playbook Created by Singaravelan.P @ Minfy Technologies

Parameters:

  OrginzationName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: Etechbrain

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: >-
      Please enter the IP range (CIDR notation) for the public subnet in the
      first Availability Zone
    Type: String
    Default: 10.0.1.0/24
    
  MyKeyName:
    Description: Select you keypair
    Type: AWS::EC2::KeyPair::KeyName

Mappings:

  MyRegionMap:
    us-east-1:
      HVM64: ami-0b69ea66ff7391e80
    us-east-2:
      HVM64: ami-00c03f7f7f2ec15c3
    ap-south-1:
      HVM64: ami-02913db388613c3e1

Resources:

  EC2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - Ref: EC2InstanceProfileRole
        
  EC2InstanceProfilePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: EC2InstanceProfilePolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - 's3:List*'
              - 's3:Get*'
              - 's3:Put*'
            Resource: '*'
      Roles:
        - Ref: EC2InstanceProfileRole
        
  EC2InstanceProfileRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /

  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref OrginzationName

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Ref OrginzationName

  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${OrginzationName} Public Subnet (AZ1)'

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${OrginzationName} Public Routes'

  DefaultPublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
        
  EC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security Group Rules
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
      
  DEVEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !FindInMap
        - MyRegionMap
        - !Ref 'AWS::Region'
        - HVM64
      InstanceType: t2.micro
      KeyName: !Ref MyKeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref PublicSubnet1
          GroupSet: 
            - Ref: EC2SecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      Tags:
        - Key: Environment
          Value: DEV
        - Key: Name
          Value: dev.etechbrain.com
      UserData:
        Fn::Base64: |
          #!/bin/bash
          sudo yum -y update
          sudo yum -y install ruby wget
          sudo yum -y erase java-1.7.0-openjdk.x86_64
          sudo yum -y install java-1.8.0-openjdk.x86_64 java-1.8.0-openjdk-devel
          sudo yum -y install tomcat8
          sudo service tomcat8 start
          sudo mkdir -p /usr/share/tomcat8/webapps/ROOT
          sudo touch /usr/share/tomcat8/webapps/ROOT/index.html
          sudo echo "Welcome to Etechbrain Development" > /usr/share/tomcat8/webapps/ROOT/index.html        
          sudo cd /home/ec2-user
          sudo wget https://aws-codedeploy-ap-south-1.s3.amazonaws.com/latest/install
          sudo chmod +x ./install
          sudo ./install auto
          sudo service codedeploy-agent start

  PRODEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !FindInMap
        - MyRegionMap
        - !Ref 'AWS::Region'
        - HVM64
      InstanceType: t2.micro
      KeyName: !Ref MyKeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref PublicSubnet1
          GroupSet:
            - Ref: EC2SecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      Tags:
        - Key: Environment
          Value: PROD
        - Key: Name
          Value: prod.etechbrain.com
      UserData:
        Fn::Base64: |
          #!/bin/bash
          sudo yum -y update
          sudo yum -y install ruby wget
          sudo yum -y erase java-1.7.0-openjdk.x86_64
          sudo yum -y install java-1.8.0-openjdk.x86_64 java-1.8.0-openjdk-devel
          sudo yum -y install tomcat8
          sudo service tomcat8 start
          sudo mkdir -p /usr/share/tomcat8/webapps/ROOT
          sudo touch /usr/share/tomcat8/webapps/ROOT/index.html
          sudo echo "Welcome to Etechbrain Production" > /usr/share/tomcat8/webapps/ROOT/index.html        
          sudo cd /home/ec2-user
          sudo wget https://aws-codedeploy-ap-south-1.s3.amazonaws.com/latest/install
          sudo chmod +x ./install
          sudo ./install auto
          sudo service codedeploy-agent start
Outputs:

  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  EC2SecurityGroup:
    Description: A reference to the EC2 Security Group
    Value: !Ref EC2SecurityGroup  
    
  DEVEC2InstanceID:
    Description: Development Application URL link
    Value: !Ref DEVEC2Instance

  PRODEC2InstanceID:
    Description: Development Application URL link
    Value: !Ref PRODEC2Instance
    
  DEVApplicationURL:
    Description: Development Application URL link
    Value: !Sub 'http://${DEVEC2Instance.PublicDnsName}:8080/index.html'
    
  PRODApplicationURL:
    Description: Production Application URL link
    Value: !Sub 'http://${PRODEC2Instance.PublicDnsName}:8080/index.html'